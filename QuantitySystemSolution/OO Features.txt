Object Oriented Features:
-------------------------

its tha ability of the quantity system to create objects from native classes in .net 

keywords are :  'new', and 'delete'

property and method accessor of the object is '->'  


how to start objects in Quantity System
s = new ::QsGraphics:Screen(300,200,10)          #window with 300x200  with 10 pixel per meter

s->Circle(2<m>,10<m>, 9<ft>)                 # draw circle at 2,10 meter  with 9feet radius

s->update()									# draw the circle on the screen (update the scene)

delete s									# delete the object.


Tuples:
-------
Ability to create a value with many QsValues

when defining tuple it represent its values

and when getting instance of it it represents a state machine with a value that points to it.

smart enum with tuple representation and state alive

Flowing Tuple
	- immutable
	- Fixed
	- Can be instantiated into a State Machine
	- known set of values.
	- Named and Identified
	
resemble enum
can  be linked to actions occur when moving from state to state

Simple Syntax:
	GearBox = (-1, 0, 1, 2, 3, 4, 5)

Named Syntax:
	var = (Name[value], ...)
	GearBox = (ReverseShift[-1], Neutral[0], FirstShift[1], SecondShift[2], ThirdShift[3], FourthShift[4], FifthSift[5])

Advanced Syntax:
	var = (Name[integer-Id, value])
	GearBox = (ReverseShift[-1, -1], Neutral[0], FirstShift[1], SecondShift[2], ThirdShift[3], FourthShift[4], FifthSift[5])

in Simple Syntax the step name and id is generated by 10
	which means Name = "Step10" id=10   , then  "Step20" id=20 etc.

in Named Syntax  only ids are increased by 10

gb = GearBox!FourthShift   #gb now holds a state of Flow instance in FourthShift


# define Clock
Clock = ( One[1<h>], Two[2<h>], Three[3<h>], Four[4<h>], Five[5<h>], Six[6<h>], Seven[7<h>])


