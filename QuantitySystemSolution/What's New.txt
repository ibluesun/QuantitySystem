[Qs 1.2.984]
- Fixed an issue when setting value on property that accept indexer as an object
	for example _C->RedCircle[10] = 20    // the RedCirlce is an object of circle not an array.

- Changed how variables are stored in memory by re-architecting the ScopeStorage
    so that you can Implement your storage provider .. this is useful for example in asp.net you may
	reuse HttpContext.Session  or introducing persistent provider
	also you can register more than one storage provider to mimic replication if you want.

- so the External variable mechanism has been replaced with IQsStorageProvider interface and changed the variable 
  management into QsScope .. so you can add many storage providers.

- Fixed calling the Scalar of Function by indexers when called
	my_f = @{(x,y)=x^2+y^3}
	my_f[3,4]   # wasn't working and now fixed.


[Qs 1.2.983]
- modified the expression of  r = 30[Mass]  to accept non sensitive name of quantities
- changed signature of method in Quantity namespace from Quantity:Type(value) to Quantity:FromValue(value)
- Added new method to the Quantity namespace Quantity:FromDimension(dimension, value)
- new mehod in the same namespace  Quantity:FromName(name,value)

[Qs 1.2.982]
- Changed quantity name from Stress to Pressure
- Changed function of Quantity:Dim  to Quantity:Dimension(value) to know the dimension of the value
- Added other functions to the built-in Quantity namespace
	Quantity:Type(value)   to know the Quantity Type of the value
	Quantity:FromDimension(text)    to get the Quantity Type from parsing text with two formats
						* using numbers:  Quantity:FromDimension("0 0 1")  
						* using letters:  Quantity:FromDimension(L1T-1)
		Letters are    
			M: Mass
			L: Length
			T: Time
			I: Temperature
			O: Electrical Current
			N: Amount of substance
			J: Luminous Intensity
			C: Currency

[Qs 1.2.98]
- changed the directive character from % to #   so it is used for constants 
- support for constants  that begins with %  %pi %phi %e %i  etc.


[Qs 1.2.97]
- added RotationMatrix to Quaternion Scalar to get the 3x3 rotation matrix of the quaternion
- updated the SymbolicAlgebra library with the latest version

[Quantity System Framework 1.3.1] 
- Added CylindricalVolume Quantity which is one polar lengths and two regular length.
- Currency Dimension and Currency Quantity has been added.
- Coin Unit with symbol $   has been added.  (it is the same as USD for now)
- ISO 4217 Currency codes has been added. 
- External conversion function to get the conversion factors based on dollar   (exchange rates are from http://openexchangerates.org)
-   so try in calculator  0<USD> + 50<EGP>    and it is working :)


[Qs 1.2.96]
- Quantity:Dim(x)     to print out the quantity dimension of x scalar
- Fixed the creation of quantity from square brackets   d = 3[PolarArea]

[Quantity System Framework 1.3.0] 
- RadiusLength renamed to PolarLength  quantity   which is the length from pole (center)
- New Quantities
	PolarArea  
	PolarVolume 
	Curvature     1/PolarLength
	FlexuralRigidity  Quantity has been added   (back to basics again)   Force * Polar Area
	AreaMomentOfInertia   Quantity which is integration of vector length^2 to normal length^2   Area * Polar Area

- Enhanced the dimension representation to show Polar Length component if exists
- Fixed minor error in getting the dimension of quantity.


[Qs 1.2.95]
- if x is a text variable  then  x:10  will get the line at index 10 :) :)
- fixed the way of accessing deep properties and methods in QsObject while parsing 
	(made me a headache when I was testing Fantastic Mesh)

- now you can use negative indexing in  like v[-3] 
	QsVector, QsText, QsMatrix, QsTensor, and QsFlowingTuple

- fixed acceesing deep properties from accessing exlamination and colon operator 
		p!properties[0]  or p!properties:10

- Fixed an Issue(20)  {issues.txt}

- Fixed an Issue(30)  -6^2 evaluated to 36 which is wrong .. it is -36
- Fixed an Issue(B10)  
- Fixed issue (10)  setting property value in deep object chain.  however there is still another small issue in setting indexer of inner property






[Qs 1.2.9]
- Transforming {ParticleLexer.dll PassiveFlow.dll and QuantitySystem.dll} into Portable Class Libraries.
- Removing the DLR hosting from Qs and putting them in new library Qs.Scripting to convert the Qs into portable library later
    {made a lot of changes to support this change}

- Added True and False as QsBoolean   also  negating them with factorial   like  true! == false  etc  {the operator is after the value}
- ability to see value types (struct) as tuples and setting them too in  object instances.
- in QsObject  added  QsObject!Properties and QsObject!Methods  to see what are the supported properties/methods of current native object
- supporting creating objects with structs inside them -- using tuple technique  like  p = new planet( (ElementName!"Earth, ElementNumber!50, Rare!true) )

- QsFlowingTuple (shortly Tuple) have many execute functions now
       Tuple->GetName(index)  
	   Tuple->GetId(index)
	   Tuple->GetValue(index)    equivalent to Tuple[index]
	   Tuple->GetOrdinal(name or id)   you can get ordinal (index) of name or id

- Made a new project Qs.RT which reference all code from Qs and have WINRT conditional compilation 
       this library to be used in windows rt projects and to leave original Qs as it is.

- Some testing for the RT library .. it can load types from the calling assembly


[Qs 1.2.8]
- Native arrays that return array of objects is now returning a tuple of the inner objects instead of array.
   made a unit test for this functionality   {{ and I will try to add more unit tests in future for code consistency }}
- When calling a function in native object the search of this function gets only the non static functions to limit the selection
    searching for method with parameters types not implemented yet.

[Qs 1.2.7]
- Now you can perform the basic operations between the objects  + - * and /
- converting between symbolic scalars and native scalars in functions and object creation now is working.
- Fixing a parsing error in symbolic calcs ${3e-3} parsed as "3e" and "-3" after fix it is now parsed as a number 3e-3 or 0.003
- First Appearence of loops
	* Syntax:   Loop [Expression] On [Vector Name | Tuple Name | Text Variable Name] 
	the return values are returned in tuple
	c = 5..14
	g = loop sin(c) on c   #will return sin values in flowing tuple
	and you can access the counter itself by add underscore before the name
	so that
	result = loop _c on c  # result will contain a flowing tuple of indexer.


[Qs 1.2.6]
- New Operations
	Matrix * vector  == Matrix * Matrix Column Vector  ;  result is vector
	Vector * Matrix  == Normal Vector Matrix * Matrix  ;  result is vector

- Power operator is now Right associative  3^2^4 == 3^(2^4)  because that was the correct behavior (forget the basic and excel and matlab .. they are wrong :) )
  Languages which the power operator is right-associative (3^3^3==7e12):
	- Python, Haskell, Ruby, Perl, Mathematica, Bash.
  Languages which the power operator is left-associative (3^3^3==19683):
	- Octave/MATLAB, Excel, BASIC.
	
- Fixed Symbolic Algebra library and added a sample for metric tensor of cylindrical coordinates to convert between covariant and contravairant vector 
	and testing the result.



[Qs 1.2.5]
- Enhancments to the lexer.  
	(more speed)

- Enhancments to the symbolic algebra. (using 0.83 version)
	Fixed the logarithmic differentiation try ${x^x}|$x  and see the result.

- Performance boosting through enabling cach in framework on unit attributes retreival.
	run speed.qs is now giving me 1900 ms instead of previous 5000 ms
	
[Qs 1.2.4]
- Fixed calling a static function from class with quantities parameters like Length<double>

- Transfered the Math namespace to be in root so calling the mathematical functions like 
	sin and cos done on the root level direclty.

- after the update of the symbolic algebra library functions that call built functions like g(x)=sin(x) can be differintiated normally 
  now you will enjoy the differentiation at its fullest (mostly)

- cross product 'x' is higher order that dot product '.'  so in case of v1 . v2 x v3  the result is volume between these three vectors
  in a scalar value.  (if your vectors are all lengths you will find a volume scalar result)

- Parsing to complex symbolics may be done by ${x*x*(a-b)^2}  so this is an advanced way to declare a symbolic quantity.

- DifferentialOperation * numerical  implemented always return zero (also implemented in scalar part)

- Back to Del Operation  \/  *  function  gives the gradient of the function based on its parameters names
   for example \/ * @f   where  @f = f(g,h) = g^2+h  will be like {@|$g @|$h} * g^2+h = {2*g 1}

   however this is not valid when multiplying with vector because the vector may contain 
   parametric equations that describe its behaviour
   like  v= { ${x+2*y+a*z} ${b*x-3*y-z} ${4*x+c*y+2*z}}           #solved problem 32 in Schaum vector analysis chapter 2

   to be able to do such multiplication in quantity system
   you may make 
   Qs> \x y z/ x v
   or 
   Qs> {@|$x @|$y @|$z}  x v

   result is  QsVector: c+1<1> a-4<1> b-2<1>  # which is correct in schaum also

   also \x y z/^2 * v  is valid expression also.

- First Addition of the directive concept    %directive
   %module  directive is to load external assembly into the current session  {please check demo.qs file}
   it resemble the Haskel way

   %module modules/qsgraphics.dll     

   somehow it is a dynamic directive because there is no preprocessor in this :) but i like the condensed form
   and it will be an escape to define things that is not related to the concept of Qs itself.

- now you can differentiate the function when it is equal a vector.
    r(u) = {u^2 2*u+5*u^3 u^3}
	Qs> @r|$u 
		DimensionlessQuantity: _(u) = { 2*u 2+15*u^2 3*u^2 } <1>

- a lot of Sqrt fixes
	* sqrt(-ve) or -ve^0.5 return complex number   (vey funny :))
	* sqrt(vector)  also has been corrected.  it produce square roots of inner components

-  magnitude of vector _|vector|_  has been fixed to act on scalar values
	   Qs> _|{3 ${x+y} ${x*Y}}|_ 
		   DimensionlessQuantity: Sqrt(9+x^2+2*y*x+y^2+x^2*Y^2) <1>


- Ability to make a vector and a matrix into a function of vector field or matrix field if they has symbolic quantities inside them
  so that Qs> @v = { ${sin(t)*cos(t)} $phi 4/${sin(phi)} }  
  result is _(t, phi) = {sin(t)*cos(t) phi 4/sin(phi) }

- Matrix Calcs:   
	* Cofactors   # m->Cofactors  
	* Inverse     # m->Inverse
	* m^-1 or m^-2  is also working
	* and in turn dividing square matrices works also :) :) :)
	
	and you can imagine that symbolic quantities are also working in this scenario :) 

- Triongometric function when take a symbolic quantity parameter it returns the function and its parameter as a whole symbolic quantity
   I used a T4 generation for the math (it is very useful indeed :))
   the function list are 
   
   {"Sin", "Cos", "Tan", "Sinh", "Cosh", "Tanh", "Acos", "Asin", "Atan", "Log", "Log10", "Floor", "Ceiling", "Exp"}
   and rest of unimplemented functions
   { "Sec", "Csc", "Cot", "Sech", "Csch", "Coth",
	 "Acosh", "Asinh", "Atanh",
	 "Asec", "Acsc", "Acot", "Asech", "Acsch", "Acoth" }

	 Examples: 

	 Qs> acoth({3 4 ${x*y} })
		 QsVector: 0.346573590279973<1> 0.255412811882995<1> Acoth(x*y)<1>

	 Qs> acot(${x^2*y})|$x
		 DimensionlessQuantity: -2*y*x/(x^4*y^2+1) <1>

- Now if the return value of a function is enum value, then the return value in Qs will be Flow Instance on that value
	this way you will have the  flow object as a state machine (which actually you can't do myuch with it)
	however its a start for something I don't know it yet.
   

[Qs 1.2.3]
- Fixed  Intermediate operation  when calling   dp(fx,n) = @|$x^n * fx
   the operations were cached and accumulated {fixed by copying it}

- Fixed that when dividing function over numerical scalar generated from inner operation in QsFunction.FOperation
    however its hard to say :) just check it

- fixed the cross product of two vectors to produce Area

- indexing now detect index operator for functions or sequences that return types that has inner elements
   which mean if you define a tensor like following code
   
		a = {4 3 2}
		b = {3 2 7}
		c = {5 3 1}
		T3 = <| a;b;c | b;c;a | c;a;b |>
	you can access the inner value  with this valid expression

	T3[1][1][1]   # returns 3

- Fixed tokenization error when merging namespace:word  to be able to only merge names that begins with letters and leave numbers as it is


- calling the function by its scalar representation

	f(x) = x^4
	@f[4]  # is a valid expression and returns the f(4) value

	(@F|$x)[4] #  returns result of _(x)= 4*x^3    

	let us try something funny :)

	Qs> g[n](f,v) ..>  (f|$x^n)[v]   #the series differentiate the function over n and calculate the value of it
	Qs> u(x) = x^5
	Qs> g[0..10](@u,4)          # returns vector of 10 values based on the sequence declaration above

	now also this adds another form of passing the function to another function
	let's review the forward differeniation 

	Qs> df(f,x,h) = (f(x+h)-f(x))/h
	Qs> df(u,3,0.5)

	now we can write it as follows

	Qs> dg(g,x,h) = (g[x+h]-g[x])/h
	Qs> dg(@u,3,0.5)


- Indexing Tuple with text index returns the instance of State Machine
     GearBox = (ReverseShift!(-1), Neutral!0, FirstShift!1, SecondShift!2, ThirdShift!3, FourthShift!4, FifthSift!5)
     GearBox!Neutral             # returns value of hash
	 g = GearBox["Neutral"]      # returns state machine

	 g->StepForward()            # put g on the FirstShift
	 g->StepLast()				 # put g on the FifthShift
	 g->StepBack()               # put g on the FourthShift
	 g->StepFirst()              # put g on the ReverseShift

	 I intended to put the state machine implementation in Qs because I thought I will find something useful for it in future.  ## stay tuned ;)


- vectors, and matrices can be treated as objects  (simple actually)
  {3  5 6 2} -> length
  [4 5; 4 5] -> Identity    or  []->Tranapose()         
  Other functions will be added as needed.



[Qs 1.2.25]
- Tuple Syntax modified :)
	#normal tuple
	tuple = (3,2,1,5)

	#tuple that is also dictionary
	tuple = ( T!3<K>, R!90<L>, P!{32 2 1}, G![3 2 ; 2 4], L!<|2 3 ; 3 2| 3 4; 1 4|>, H!(3,4,1))

	#tuple that is dictionary with name and integer
	tuple = ( 3:T!400<K>, 500, 200, 20:RT!"Hello there", L!<|3 2 1 4|>);

	so all variations are valid  number:key!value, number:value, name!value or values only

	however the tuple should have two items minimum to be a tuple, {no meaning in tuple of single value}

	it should be noted that automatic id is given to the items if not specified by increment of 10s over the largest id defined in the tuple

- Tuple Access
	Qs> tuple[0]   # indexer
	Qs> tuple!T    # key
	Qs> tuple:3    # id




[Qs 1.2.2]
- delete [variable]   added 
	it means you can create instances and delete them like this
	Qs> s = new ::System:Windows:Forms:Form
	Qs> l = new ::System:Windows:Forms:Label

	Qs> l->Text = "Hello There"
	Qs> l->top = 60
	Qs> l->left = 40
	Qs> s->Controls->Add(l)
	Qs> s->Text = "Hello There"

	Qs> s->ShowDialog()
	Qs> delete s

- Reference Assigning
   Qs> a = 30
   Qs> &b = a       #resemble the c++ lreference
   now b point to the same value as a and you can use the two variables equally.

- Differentiation operation now works also on symbolic quantitis
   Qs> sq = 4*$x^4 + 2*$x^3*$y^4 + 2*$y^3
   Qs> @|$x * sq

- Tuple Implementation
    Qs> s = (4,2,"HEllo World")
	Qs> GearBox = (ReverseShift[-1], Neutral[0], FirstShift[1], SecondShift[2], ThirdShift[3], FourthShift[4], FifthSift[5])
	Qs> GearBox!FirstShift   # access the named value of 'FirstShift'

R.I.P Steve Jobs 


[Qs 1.2.1]
- Rational Number  Q{1 2} == 1/2 == 0.5  but in rational format has been added.
- support to multiple inner namespaces like  p:g:j=30
- fixed the function operator in assigning so the '@'  precede the function itself inside the namespace i.e. p:g:@h
- lambda expression added  to form a quantity 
	- natural way of function quantity was
		- u(t) = 0 + 2.2*t
		- a = @u									# which indicates that 
	- New way is to write the funtction in lambda 
		- @{(t) = 0 + 2.2*t}                        # the new 
- now you have to explicitly load the external library before using it 
- you can use .net system classes by adding :: to indicate you will start from the begining of namespace
    example  Qs> ::System:Environment:ProcessorCount

- Ability to create instance of .net classes (Qs now try to map the class public properties between native and qs types)
- I already added a library to draw simple and I mean simple circle on screen.
   please refer to the demo.qs in the executable folder.


[Quantity System Framework 1.2]
	- Fixed accumulating metric prefixes problem that 1<m/s> * 1<s/m> ==  2<1>   which is wrong ofcourse




[Qs 1.2]
- Vector range operator  '..'  added 
     3..5  returns vector {3 4 5}


[Qs 1.1.9.968]
- numerical ^ symbolic implementation. 
	I mean a=4^$x or s[n] ..> n^$x

- Function converted to a quantity to be able to go into vectors, matrices, and tensors.
- Because refering to function with @  will get a scalar function then assigning to a new function variable should be done like this
		@NewFunc  = @func|$x   # this will differentiate func and put it into NewFunc
- Vectors, matrices, and tensors now accept functions as quantities
	v = {@f @F(y) @g}

+ The new changes include also that you can differentiate the symbolic quantities
	a= 4*$x^3
	then a|$x  will produce 12*x^2
	- also you can create function from symbolic quantity 
		@f = $x^4+$y

- Symbolic quantities can be raised to real numbers now.

+ Differential Operator has been added.
	- Which is in turn very appealing 
		- the operation goes like this   @|$x  is an intermediate operation 
		  that when mulitplied by a function, it gets its derivative of paramater x
		- @|$x * @F   is the same as  @F|$x   

+ Nabla Operator has been added
	- Gradient has been implemented by   \/*@f   where @F refer to the function that express the scalar field.
		- example:  f(x,y) = x^2 + y^2  the \/*@F  produce vector  {2*x 2*y}




[Qs 1.1.9.967]
- DIP length unit for  added   {thanks for starnuto}
- Cubit unit conversion fixed.

- Function [+ - * /] symbolic quantity that is not exist in the function will generate a function with a new parameter for this symbolic quantity
	f(x) = x^2
	@f+$y result in  _f(x,y) = x^2+y

- Enhancing SilentEvaluate function (just look to the code)

- Adding derivative of functions for first time
Qs> f(x) = x^4
Qs> @F|$x 
     _(x) = 4*x^3

Qs> f(x,y) = 3*x^2*4*y^3
Qs> @f|$x
    _(x,y) = 24*x*y^3
Qs> @f|$y
    _(x,y) = 36*x^2*y^2
Qs> @f|$y|$x
    _(x,y) = 72*x*y^2
Qs> @f|$y^2|$x
    _(x,y) = 144*x*y

- Breaking Change
	Absolute  and Magnitude (Norms)    are now   _|x|_   and _||x||_ 

- Hopefully the next release will be the 2.0 release :) :) :) 

[Qs 1.1.9.966]
- Added the Quaternion Power to integer.
- Another enhancement to the parsing speed.
- Adjusted the equality and inequality for quaternion and complex quantities {semi adjustment}

[Qs 1.1.9.965]
- Using .NET Framework 4 for the whole project and its realted projects.

- Now functions when added or subtracted (all basic operations) use the symbolic library for manipulating the new function
    -  f(x,y) = x^2+y 
	-  g(x) = 2*x^2  
	-  @g+@f  ==>  _(x,y) = 3*x^2 + y
	- When adding function to symbolic quantity the symbolic quantity should be part of the argument list to be able to make the operation
		- g(x) = x
		- @g*$x ==>  _(x) = x^2
		- @g*$y ==> Exception 'y' is not in the argument list.

- First usage of .NET Parrallelism and fixing some threading issues in the framework itself (WOW, so I am now diving into the concurrent world :D )
     - Implemented Parallelism in vector basic operations.

- Added the Tensor product of order two which produce the same result as tensorial product between two matrices.

- New Numerical types beside  Real and Symbolic quantities
	
	- 1) Complex Quantity (using the new complex type in .net 4)
		- C{real imaginary}[<unit>]  
			- example: C{3 2}<L> + c{1 2}<m^3>
		- to make a complex number  write c followed by vector of two components (any extra component will be ignored)
		- and you can follow the vector with unit to specify the complex number unit.
		- C{3 1}<L> ^ 3.2   also valid
		

	- 2) Quaternion Quantity (I wrote the code by reading  http://www.boost.org/doc/libs/1_43_0/boost/math/quaternion.hpp)
		- H{r i j k}[<unit>]  
			- example: H{59 4 3 22}<L> 

	- General Notes
		- No Spaces between prefix and vector part or vector part and unit.
	
By this addition the scalar object is now CoMpLeTed holding 4 types of values
	+ Real Values
	+ Complex Values
	+ Quaternion Values
	+ Symbolic Values



[Qs 1.1.9.964]  (Released)
- Enhancing the parsing speed  in ParticleLexer library which gave me (from 7% to 20% ) minimum to maximum performance increase.
- Additition and Multiplication of Tensor with Scalar adjusted.
- Outer product for matrix added '(*)' (Kronecker product)
- Changed Tensor Rank into Tensor Order which is more correct than Rank word :S :S
- Tensor Order 1 * Tensor Order 1 = Tensor Order 2 (Dyadic operation)  {NEVER NEVER NEVER think that vector is a first order tensor VECTOR IS VECTOR and TENSOR IS TENSOR  (although they look the same)}
- I need to study tensor algebra also where is the 3rd order tensors and 4th 5th WHY I CAN'T find these entities and also what is the meaning of covariant and contravariant tensors :( :( :(  {{ I CAN'T UNDERSTAND LIKE THIS }}


[QuantitySystem Framework 1.1.9.64]
Added other quantities to support my thesis of my thermodynamic project.
- SpecificEnergy
- MolarDensity
- MolarSpecificHeat
- MolarVolume

Changed the Calculator from AnyCPU to x86 structure  {I was testing with native 32 bit library  "REFPROP" if you are insist to know.}

[Qs 1.1.9.963]
- Symbolic Algebra library  fixed. (refer to http://SymbolicAlgebra.codeplex.com)
- Determinant for squared matrices above 3x3 is added.
	Symbolic quantities also supported in determinants.
- Equality and InEquality of text added.
- GetScalar function for tensor that get any element in the tensor giving that number of indices == tensor rank
- Getting range from parameterized sequence return vector or matrix or tensor based on what you have written in symbolic quantities
   g[n](x) ..> x^n
   g[0..3] result in { 1 x x^2 x^3}

- Getting Standard Deviation from parameterized Sequence Implemented. 
	S[1 !% 10]   # !% for standard deviation

- Enhanced the sequence declaration to include the starting and ending index variables during evaluation
	g[k=m->n](x) ..> n - k*x  #m is the starting index, and n is the ending index which can be used in the items evaluation.
	also the range operations has been modified to support the new range start and end variables.


+ [QsFramework 1.1.9.63]
	- Two energy units added <MBTU> = 1000 BTU  and <MMBTU> = 1000000 BTU    units
	- Calorie unit added <cal> =  4.184 <J>  and this is the thermodynamic  value 
	- Pound Calorie <lbcal>

- Acess the elements of vector, matrix, and tensor from any rank now supported.
  however the range operators are not implemented yet.

  Note: The priority of accessing vectors, matrices, and tensors are higher than accessing Sequence with the same name.

  when you declare a vector you can access scalar with one index.
  when you declare a matrix you can access vector with one index, scalar with two indices.
  also tensor from third rank can be accessed by one index for matrix, 2 for vector, and 3 indices for scalar
  the above ranks also can be accessed in the same manner as tensor of 4th ranks contains tensors of 3rd rank.


[Qs 1.1.9.962]
- Imlementing Standard deviation in Sequence  x[1 !% 10]  for only sequence without parameters (not a finished implementation)
- Enhancing the Symbolic Algebra library and include it in this version to make raising symbolic values to symbolic values
   valid in case all involved quantities are dimensionless.
- Refactored many things in QuantitySystem Project (hoping that I haven't hurt anything with that)
- AddOperation and SubtractOperation for tensor are implemented
- Fixing matrix determinant with symbolic variables.
- Enhancement to the tensor parsing.
+ Adding support to store tensors with more ranks 4, 5 etc... 
	so Tensor that contain many matrices is as follow 
		<| 4 2; 1 3 | 3 4; 3 1|>
	for 4th rank you can define recursive declaration 
		<| <| 4 2; 1 3 | 3 4; 3 1|> | <| 1 2; 5 3 | 6 4; 3.3 1|> |>

	and ofcourse all your scalars can be symbolic, or numerical with units 


[Intermediate fixes]
- Fixed an error appeared after [Qs 1.1.9.94] because of caching (I was caching the Dimension of the Derived Quantity without chaning it when changint InternalQuantities)
  This led to errors in determining the quantity type from successive calculations
   however [Qs 1.1.9.93] doesn't have this problem ( the problem because of my endless wisedom)

- More toward fusing Symbolic Quantities now the dot product, vector product, vector, and matrix calculations support symbolic ;) (somehow)

- refactored Quantity into NumericalQuantity in QsScalar type. 

- Fixed a destructive error: 5^-3 was evaluating in bad behaviour because i was translating -3 to (-1*3) then the priority of '^' precede the priority so I made a new operator internally to be (-1_h*3) to be evaluated before any operator.

- Fixed Symbolic power in Symbolic Algebra library and to be checked the dll here
  simply $r^0 equal {1} :) 
   and added support for negative powers.




[Qs 1.1.9.95]
- The usage of DLR 1.0  final release 
	DLR 1.0 released with the release of visual studio 2010 
	and I adopted it immediately
	thank god it didn't break my build :) (although I don't know what's new!! ) DLR Team should write a lot of documentation
- Enhancing the parsing of Matrix (to behave like matlab again) in order to think about how will I enhance the Tensor parsing.
- Adding shifting to Text 
	"Ahmed" >> 1  result it "hmedA"  :)
- Transfered the development into Visual Studio 2010 to use C# 4.0
	for future I am going to use the Parallel in .NET 4.0
	this will be so useful in matrix and tensor calculations
- Introducing the Symbolic Quantity type :)
    When you add dollar sign followed by letters it will form a Symbolic Quantity

	$x+$x = 2*x  
	Great isn't it 
	I really liked it and imagine it is a scalar value (that means it will find its way in vector, matrix, and tensor)

	the calculation is based on my Symbolic Algebra project :)
	http://SymbolicAlgebra.CodePlex.com

	however not all calculations still going right :)  (bear with me, I am only one person in this)

	may be I should leak some thoughts also 
	the Scalar architecture will hold 4 primary types (Any one remember the Variant type in old visual basic)
	the same idea goes here
	a- Double Number Quantity                    'AnyQuantity<double>
	b- Complex Number Quantity                   'AnyQuantity<Complex>               # Two Terms
	c- Quaternion Number Quantity                'AnyQuantity<Quaternion>            # Four Terms
	d- Symbol                                    'AnyQuantity<SymbolicVariable>       

	:) Imagine that you have a 4-D Tensor with quaternion components 
	it will be amazing :D {I don't know how}
	
	[Quantity System Framework 1.1.9.6]  {don't mix the framework with the DLR part :) }
	- Some caching here and there  

ok another news is that I am begining to study for the master thesis
I am researching the pulse combustor to put it into gas turbine cycle and to see what is the performance and all other charachterisistics
if you have any (and I really need it ) any data about its usage and its design and its importance life please don't hestiate to help me
even you could change my mind to change the subject to other thing :)


[Qs 1.1.9.94]
- breaking Change the tesnor parsing groups into '<|' and '|>'
 so that the tensor should be written as 
   T =  <| 5 4; 3 2 | 9 1; 2 4 |>
   
- Adding Shift Operators '<<' '>>'  
  the shift operator works on vector and matrix.
  
- Enhancing the binding of external functions
  so that now you can use a native c# function without the need to reference Qs library
  only by using native parameters.
  {this is still in developement however}
  
NOTE: I Do a lot of things in the architecture and I don't have a clear vision sometimes about what I am doing
       I am sorry for this :S
       
- Fixed '#' inside qoutation marks {old behaviour was truncating any thing after hash even if it was in text.
  this was discovered when I was playing with play command
  Music:Play("C# D#");
  
       
 

[Qs 1.1.9.93]   (Released)
- Added Text support as QsText and adjusting functions that accept strings for the new way.

- Another fix for the Metric prefixes calculations.
    now the prefixes should be final 
    Qs> List Prefixes               #To list all Metric prefixes
    
- Introducing the Tensor parsing concept
   T =  << 5 4; 3 2 | 9 1; 2 4 >>  
   The Tensor is up to the 3rd rank tensor
   no tensor calculation implementation is given.


[Qs 1.1.9.92]
- Enhancing the parsing and tokenization speed.

- Meet the tensor product '(*)' operator

- [Qs Framework 1.1.9.4] 
	Fixed <km^2.m>  in investigating the correct prefix the result was error
   thanks to Luc http://www.codeplex.com/site/users/view/Luc who report that issue 
   http://quantitysystem.codeplex.com/WorkItem/View.aspx?WorkItemId=5556
   
   now <km^2.m> produce <hm^3>  :)
   
- added the function value for first time
  by preceding '@' before function name the function returned with its object itself
  u(x) = x^2
  v(x) = 2*x
  w = @u+@v  # which make w(x) = x^2 + 2*x
  
  and you can select the function with its argument like @f(u,v) for example
  


[Qs 1.1.9.91]
- Fixed Vector - Scalar operation (it was a shame and it was wrong :( )
- added graph:plot(vector, vector)  function to QsStudio (Experimental)

[Qs 1.1.9.90]
- Removed ^x (PowerCross) Operator (it was annoying)
- Sequence can return function  when calling without parameters.
  so if you define g[n](x) ..> x^n  you can get x^2 by calling g[2]
  or better you can get a function that hold a series by calling g[0++6]
- by introducing the new Sequence functionality we are here making a small step into the symbolic algebra world.

- breaking change named argument now is with  equal sign only not ':=' so that
   f(x) = x
   f(y) = y^2
   f(z) = z^3
   
   vv = f(z = f(y = f(x = 10)))  
  
- Paticle Lexer Separated into independent library.

- No referencing for global variables in functions
   functions only depend on parameters.
   
- Bug Fixed: Relation between parameters and parameters in function body are case insensetive.

   

[Qs 1.1.9.85]  (Released)
- Fixed some bugs:
	Equality operator in matrix result in bad behaviour  when comparing to null.
	parsing of inner functions with named arguments.

- Scalar and Vector comparison operators is working with the norm values {absolute in scalar and magnitude in vector}

- Added checking for variable names and to prevent treating numbers as variable names.

- This will be released as attempt one before 1.2 release if things is good i'll release 1.2 soon.


[Qs 1.1.9.8]
- fixed casing error in when otherwise  statement

- fixed an exception of accessing delegate property in MONO
    replaced the call to property into a function call.
    
- Enhancing passing arguments to functions
    frankly fixed f(a) = Windows:MessageBox(a) 
    that resulted in displaying a when f(hello)
    now it shows hello :)
    
- [MassFlowRate] Quantity Added.

- Comparing Scalars with vectors is calculated based on Magnitude of the vectors.
- Comparing Vector with Vector also rely on the magnitude of vectors.
    
        
    
[Qs 1.1.9.7]
- Added Relational Operators in QuantitySystem Framework
- Added the when-othwerwise statement to evaluate conditions

  sgn(x) = -1 when x<0 otherwise 0 when x==0 otherwise 1
  
  [Success Expression] when [Test Expression] otherwise [Fail Expression]
  
  
  This is a great new feature in making conditions and it is pure function flavor in a new syntactic form.
  
  
- Planning The next major release will be 1.2  version which will hold all things together
   but after testing and making sure that there are no errors.
  

[Qs 1.1.9.5]
- Fixed namespace:variable  =  expression   assignation problem
- fast checking in function and sequence parsing to ignore the extra un-needed processing.

[Qs 1.1.9.4]
- Namespace support to sequence has been added.

[Qs 1.1.9.3]
- Modulus operator '%' added to the framework and supported into Qs
- Function overloading by parameter names:
	so you can define the same function name with different parameter names
	Qs> f(x) = x^2
	Qs> f(y) = y^2
	Qs> f(x,y) = x+y
	Qs> f(u,v) = u - v
	
	
	f(3)  call the default function
	f(y:=4) call the function that have its parameter name y
	
	The first declared function is the default function that will be called when you don't specify 
	named arguments when calling the function.
	
	when selecting named argument in calling the function the qs will try to map the desired function.
	
	NOTE: Passing functions as arguments deals only with the default function declaration.
	
- refactoring a great deal into the QsNamespace
   the QsNamespace is for providing functions variables from user defined and hardcoded in c#.
   
   


[Qs 1.1.9.2]
- Named argument in functions added.  f(y := 2, x := 3)
- Support to the DLR 0.92 by including the new references that released in 22 October {they changed a lot of things}
- Renamed [Pressure] to [Stress] and [Velocity] to [Speed].
- Added Environment:TickCount Property  it is in milli second.


[Qs 1.1.9.1]
- Setting Seuquence negative index bug (FIXED)
- Sequence range from bigger to smaller number (FIXED)
- Getting Summation , Multiplication , or Average from Bigger to Smaller number in sequence (FIXED)
- You can suppress the output by adding semi-colon ; at the end of the expression.

[Qs 1.1.9.0]
- all variables and namespaces with their functions or variables are CASE INSENSITIVE.


[Quantity System 1.1.8.3] 
- Namespace capabilities
   Namespace can be added to variables and functions.
	so this is a valid form
	
		x:r = 10
		x:g(x) = x/2
		b=g(x:r)
		
		
- Calling functions written in C#
  Namespace is mapped to Static Class in C#
  the root of Qs namespaces is [Qs.Modules]  you should add your classes here.
  
  and Public properties will serve as qs namespace variables
  public functions will server as the qs namespace functions
  
  the return values whould be QsValue.
  and function parameters are QsParameter.
  
- I included QsStudio.dll as extension module 
  this library is not completed however you can try this :)
  
  Qs> Music:Play(c d e f g a b c>)     #Play major scale on Do  
  Qs> Music:SaveMidi(c d e f g a b c>, tt.mid)
  Qs> Music:PlayMidi(tt.mid)
  Qs> Music:PlayMidi(RaisingFight.mid)   #included in the 
  
  
   

[Quantity System 1.1.8.2] (Released)
- Now Matrix operators
  '*'  for ordinary matrix multiplication
  '^'  power of ordinary matrix multiplication
  '.'  for matrix elements multiplication
  '^.' for matrix elements power.

  please let me know if you have further ideas about this arrangement.  
  
- The first manual for the program and also specifications.
  
[Quantity System 1.1.8.1] 
- Metric prefixes overflow fix
  when you form a unit <ms.s> milli second * second 
  the result is <s^2>  and an overflow occur due to the milli prefix
  this milli factor goes to the value part
  so if you entered 2<ms.s> the result will be 0.002<s^2>
  
  however the framework is always try to get the best expression it can have.
  for example if you make 2<Gm.mm> giga Metre * milli Metre the result will be 2<km^2>
  
  but if there were no corresponding prefix for the overflow then the prefix is removed 
  and overflow flag in the unit is raised, and the quantity value is altered as shown 
  in the first example.

- Still I am confused about matrix multiplication operators.
	now * operator makes array multiplication for matrix
	and . dot operator make the ordinary matrix multiplication.
	
	this is due to in calling function or sequences 
	the * operator is used and the makes the calculation of QsValue go through all elements
	I find it usefull frankly
	
NOTE:	my brain is distracted and I can't make correct judgment :(
  
  
[Quantity System 1.1.8] 

Code Design Change in Qs DLR:
-----------------------------

now there is a QsScalar class that wrap the AnyQuantity<double> class
QsScalar is inherited from QsValue
Three Classes inherited from QsValue

 1) QsScalar  
 2) QsVector
 3) QsMatrix
 
 
Later the Qs will also support Tensor with rank 3 {any suggestions is appreciated}

please notice that the matrix calculations is not the best algorithm available.


New features:
-------------

- Absolute Operator   |n|  where n is QsScalar or QsMatrix

- Vector support:
	  a= {2 3 4}  or a={2,3,5}
	  
- Dot product for vectors   New opertaor
	  {2,3,4} . { 5 6 3}
	  
- Crosss product for vectors of 3 components  use 'x' letter       New Operator
	  {3<m> 2<A> 4<N>} x {2<ft> 2<mA> 3<pdl>}
	  
- Vector Norm ||_||:
	    ||{3 5 3 2 1}|| or  ||a||

- Factorial of Vector gets all the factorial of its components

- calling a function with vector as input result in vector as a result.
  

- Matrix support 
	m1 = [2 3 4; 3 2 1; {5 4 3}]
	
- Matrix multiplication

- Determinant for matrix using determinant operator
	| a | 
	| [ 2 3 4; 3 2 1; 5 2 3] |
	only for 2x2 and 3x3 matrices.
	LU decomposition methods comes later.
	
- Sequence new range operator '..' i.e. 's[n..m]':
   returns vector if elements are scalars.
   returns matrix if elements are vectors.	

- Enhancments in parsing and exceptions handling.

New Quantities:
---------------

- Stiffness						<N/m>
- RotationalStiffness			Torque / Angle
- Momentum						Mass * Velocity
- MassMomentOfInteria			I   <kg.m!^2>   like the regular mass
- AngularMomentum				Mass Moment Of Interia * Angular Velocity

New Units:
----------
- Cubit <cubit>					Ancient Length unit = 45.72<cm> based on google calculator.


[Quantity System 1.1.7] {Release}
----------------------------------

- Passing Functions as arguments.
  
- Optimization for parameterless sequqnece  {actually I am only caching elements  especially for fibonaccy like sequences}
     however sequence still need another optimizations.
     
- Run [filename] in console load the content file into the current session and execute its contents (usefull if you had coded previous functions or sequences before)


                                          
[Quantity System 1.1.6]
- Sequence concept added. in Qs ver 1.1.6


[Quantity System Framework 1.1.4] {Releases}
- Moved Exception handling from Qs layer to Console layer  so that dynamically calling for Qs will see the real exceptions.

- Fixed the Factorial for the thousand TIME :( I don't know why the function is always trick me and goes WRONG :D I must be slept or something.
   3<m>! = 6<m^3>  
   3.5<m>! = 11.6317283996629 <m^3.5>
   you can notice that factorial is accepting real positive numbers with units also :)
   this is what you should expect from treating variables as quantities.
   
- I think there are no caching errors however if any one find conversion error please revert back to release 1.1

- Not related to the program (I finished preliminary master exams today :) ) 2009-07-20  
    4 days to enter my fourth decade, 4 days and I will celebrate my 30 birthday day ;)  wish me luck.
    

[Quantity System Framework 1.1.3]
- Now Factorial is also available for real numbers
- Fixed serious caching error in units conversion

New Units
---------
- Gravitional System namespace under metric added three new units  (finally I figured out what it is really mean :) )
- <hyl> for mass
- <p>  small letter for Pond unit  which equal <gf> Gramforce  added also

- <grain> renamed to <gr>  Grain unit
- Poundal unit <pdl> added = <lbm.ft/s^2>



[Quantity System Framework 1.1.2]

- [Specific Weight] quantity added
- optimization for unit conversions  (caching added for already calculated unit conversions)

- enahcing Qs hosting to be used dynamically inside any .NET applications using DLR hosting APIs.
	to create the run time: 
            var QsScope = sr.ExecuteFile("test.qs");            
            var QsEngine = sr.GetEngine("Qs");
            var a = QsEngine.Execute("a=5<m>", QsScope) as AnyQuantity<double>;
		
- factorial optimized. {I am still searching how to make factorial for real numbers}

[Quantity System Framework 1.1.1]

- Whole optimization for the library. in all 4 basic operations
- Parsing optmization in the DLR part.
- factorial operator added '!' {calculation only occur for the integer part}


- fixed the exponent in metric units  10<m>+100<are>^0.5  produced error in calculations.

- Volume Flow Rate  quantity added
- cfm unit added  (cubic feet per minute)
- gpm unit added 


[Quantity System Framework 1.1]  [Released]
- unit modifier '!'
	the modifier will modify the lenght units to produce radius length quantities
	
	so now you can say a = 10<N.m!>  which will produce Torque

- separation between DLR and quantity system framwork

- functions are called by delegates not hard coded expressions.

- functions can refer to variables declared in global scope 
	but local parameters with the same name is habing the higher priority	

- Raise to power enhanced 
	now fractions are included so 1<kg>^0.5 = 1<kg^0.5>
	also this is a valid operation
		10<m> + 100<ha>^0.5
		
	however you can't generate quantities with fraction values.
	 only by raising to power.

	
	

[Quantity System Framework 1.0.9]

*New Features
	- Power operator has been add  x^2   -- Cautious {you only can raise to dimensionless numbers}
	- More toward DLR support: the program is entirely run under QsHost which subclass DLR ConsoleHost
	- Functions appear for the first time
		Declaration is normal like ordinary math 
			Qs> f(x) = x^2+64
			Qs> f(x,y) = x/y
		Called
			Qs> 10 - f(f(40,20))  + 20
				DimensionlessQuantity: -38 <1>	
				
*Fixes
   - Correct the <1> unit in parsing which affected <1/kg> and all units
   - Calculating numbers that start with sign - or +   (fixed)  
			so this is valid  a=-2 ++324--392 +50<m/ft> 
   - Adding Angle Quantity to Dimensionless Quantities is valid now
		-----------------------------------------
		Qs> 1 + 10 <rad>
			DimensionlessQuantity: 11 <1>
		Qs> 1 + 10 <deg>
			DimensionlessQuantity: 1.17453292519943 <1>
		Qs> 10<deg> + 1
			Angle: 67.2957795130823 deg
		Qs> 10<rad> + 1
			Angle: 11 rad   
		-------------------------------------------------
		
		and with units taken into consideration also.

[Quantity System Framework 1.0.8.1]

- New Quantities
	Molar Mass       g/mol
	Heat Capacity    J/K
- New units
	lbmol  pound mol
	
- made feet = 0.3048 m to adjust nautical mile to be 1852m
		
[Quantity System Framework 1.0.8]

- Colors changed :)
- SpecificVolume Quantity Added
- Calculations of operators priority fixed and Parrenthesis support added.

[Quantity System Framework 1.0.7]

* New Features
	- Add support for parsing units with exponent like <cm^2>
	- Add support for simple mixed units with one '/' division charachter 
		<kg.m/s^2> gives Force Quantity
	- The first use the DLR Expressions instead of Linq Expressions 
		{this is a strategic transfer to support more features in the future}	
		{also because built in linq expressions make errors in mono under linux :( }
			
	
* New Units
	-psi  for pound per square inch  for pressure
	
* Many Fixes
	- Fixing of Metric Prefix multiplication and division  (although need testing).
	- conversion from metric units had an error because exponent wasn't taken in consideration.
	
[Quantity System Framework 1.0.6]

* New Quantities
	- Electric Charge
	- Electromotive Force
	- Capacitance
	- Electric Conductance
	- Electric Resistance
	- Magnetic Flux
	- Magnetic Flux Density
	- Inductance
	- Luminous Flux
	- Illuminance
	- Catalytic Activity  
	
* New Units
	- Coulomb 'C'
	- Farad   'F'
	- Volt    'V'
	- Siemens  'S'
	- Ohm      'ohm'
	- Weber    'Wb'
	- Teslq    'T'
	- Henry    'H'
	- Lumen    'lm'
	- Lux      'lx'
	- Katal    'kat'  => mol/s
	
	
	* Astronomical Units:
		-	AstronomicalUnit symbol changed from 'AU' to 'au'
		-   Light Year Length added                      'ly'
		-   Parsec unit  length                          'pc'  with metric support
		-   Solar Mass unit                              'Mo'
		-   Julian Year unit							 'a'
		
		
	
	-Are unit of area       symnol changed from 'a' to 'are'
	
	-u unified mass of atom  added 'u' = 'Da'
	-Dalton transfered to Natural Units
	
	* Shared Unit System added 
		The shared system contains units that exists in all unit systems
		-Second 's'  transfered to Shared unit system 
		
	* Misc Unit System added
		the system is for units that don't have exact unit system and needs to be there untill we know its unit systems

		+ Angle units
			- Arc Degree unit added  'deg'  ==>this is simple the angle degrees
			- Arc Minute unit        'arcmin'
			- Arc Second unit        'arcsec'
			- Milli Arc Second       'mas'
			- Gradian  unit          'grad'
			- Revolution  unit       'r'   whole one cycle = 360<deg>
			
		- Angstrom Transfered to Misc namespace
		
		+ Time units
			- Minute unit            'min'
			- Hour   unit            'h'
			- Day    unit            'd'	
		
		+ Volume units
			- Cubit Centimetre       'cc'	
	
	
	
* Units Logic
	Two ways in defining Quantity System of Units
		a) Make a default unit and others to reference it.
		b) Make all units reference SI units directly.	
	Either ways are acceptable but not mixed or a conversion errors occur {please refer to the code}
	
	Note: units symbols are unique and case sensitive
	
	