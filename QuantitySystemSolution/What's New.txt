[Quantity System 1.1.7] {Release}

- Passing Functions as arguments.
  
- Optimization for parameterless sequqnece  {actually I am only caching elements  especially for fibonaccy like sequences}
     however sequence still need another optimizations.
     
- Run [filename] in console load the content file into the current session and execute its contents (usefull if you had coded previous functions or sequences before)


                                          
[Quantity System 1.1.6]
- Sequence concept added. in Qs ver 1.1.6


[Quantity System Framework 1.1.4] {Releases}
- Moved Exception handling from Qs layer to Console layer  so that dynamically calling for Qs will see the real exceptions.

- Fixed the Factorial for the thousand TIME :( I don't know why the function is always trick me and goes WRONG :D I must be slept or something.
   3<m>! = 6<m^3>  
   3.5<m>! = 11.6317283996629 <m^3.5>
   you can notice that factorial is accepting real positive numbers with units also :)
   this is what you should expect from treating variables as quantities.
   
- I think there are no caching errors however if any one find conversion error please revert back to release 1.1

- Not related to the program (I finished preliminary master exams today :) ) 2009-07-20  
    4 days to enter my fourth decade, 4 days and I will celebrate my 30 birthday day ;)  wish me luck.
    

[Quantity System Framework 1.1.3]
- Now Factorial is also available for real numbers
- Fixed serious caching error in units conversion

New Units
---------
- Gravitional System namespace under metric added three new units  (finally I figured out what it is really mean :) )
- <hyl> for mass
- <p>  small letter for Pond unit  which equal <gf> Gramforce  added also

- <grain> renamed to <gr>  Grain unit
- Poundal unit <pdl> added = <lbm.ft/s^2>



[Quantity System Framework 1.1.2]

- [Specific Weight] quantity added
- optimization for unit conversions  (caching added for already calculated unit conversions)

- enahcing Qs hosting to be used dynamically inside any .NET applications using DLR hosting APIs.
	to create the run time: 
            var QsScope = sr.ExecuteFile("test.qs");            
            var QsEngine = sr.GetEngine("Qs");
            var a = QsEngine.Execute("a=5<m>", QsScope) as AnyQuantity<double>;
		
- factorial optimized. {I am still searching how to make factorial for real numbers}

[Quantity System Framework 1.1.1]

- Whole optimization for the library. in all 4 basic operations
- Parsing optmization in the DLR part.
- factorial operator added '!' {calculation only occur for the integer part}


- fixed the exponent in metric units  10<m>+100<are>^0.5  produced error in calculations.

- Volume Flow Rate  quantity added
- cfm unit added  (cubic feet per minute)
- gpm unit added 


[Quantity System Framework 1.1]  [Released]
- unit modifier '!'
	the modifier will modify the lenght units to produce radius length quantities
	
	so now you can say a = 10<N.m!>  which will produce Torque

- separation between DLR and quantity system framwork

- functions are called by delegates not hard coded expressions.

- functions can refer to variables declared in global scope 
	but local parameters with the same name is habing the higher priority	

- Raise to power enhanced 
	now fractions are included so 1<kg>^0.5 = 1<kg^0.5>
	also this is a valid operation
		10<m> + 100<ha>^0.5
		
	however you can't generate quantities with fraction values.
	 only by raising to power.

	
	

[Quantity System Framework 1.0.9]

*New Features
	- Power operator has been add  x^2   -- Cautious {you only can raise to dimensionless numbers}
	- More toward DLR support: the program is entirely run under QsHost which subclass DLR ConsoleHost
	- Functions appear for the first time
		Declaration is normal like ordinary math 
			Qs> f(x) = x^2+64
			Qs> f(x,y) = x/y
		Called
			Qs> 10 - f(f(40,20))  + 20
				DimensionlessQuantity: -38 <1>	
				
*Fixes
   - Correct the <1> unit in parsing which affected <1/kg> and all units
   - Calculating numbers that start with sign - or +   (fixed)  
			so this is valid  a=-2 ++324--392 +50<m/ft> 
   - Adding Angle Quantity to Dimensionless Quantities is valid now
		-----------------------------------------
		Qs> 1 + 10 <rad>
			DimensionlessQuantity: 11 <1>
		Qs> 1 + 10 <deg>
			DimensionlessQuantity: 1.17453292519943 <1>
		Qs> 10<deg> + 1
			Angle: 67.2957795130823 deg
		Qs> 10<rad> + 1
			Angle: 11 rad   
		-------------------------------------------------
		
		and with units taken into consideration also.

[Quantity System Framework 1.0.8.1]

- New Quantities
	Molar Mass       g/mol
	Heat Capacity    J/K
- New units
	lbmol  pound mol
	
- made feet = 0.3048 m to adjust nautical mile to be 1852m
		
[Quantity System Framework 1.0.8]

- Colors changed :)
- SpecificVolume Quantity Added
- Calculations of operators priority fixed and Parrenthesis support added.

[Quantity System Framework 1.0.7]

* New Features
	- Add support for parsing units with exponent like <cm^2>
	- Add support for simple mixed units with one '/' division charachter 
		<kg.m/s^2> gives Force Quantity
	- The first use the DLR Expressions instead of Linq Expressions 
		{this is a strategic transfer to support more features in the future}	
		{also because built in linq expressions make errors in mono under linux :( }
			
	
* New Units
	-psi  for pound per square inch  for pressure
	
* Many Fixes
	- Fixing of Metric Prefix multiplication and division  (although need testing).
	- conversion from metric units had an error because exponent wasn't taken in consideration.
	
[Quantity System Framework 1.0.6]

* New Quantities
	- Electric Charge
	- Electromotive Force
	- Capacitance
	- Electric Conductance
	- Electric Resistance
	- Magnetic Flux
	- Magnetic Flux Density
	- Inductance
	- Luminous Flux
	- Illuminance
	- Catalytic Activity  
	
* New Units
	- Coulomb 'C'
	- Farad   'F'
	- Volt    'V'
	- Siemens  'S'
	- Ohm      'ohm'
	- Weber    'Wb'
	- Teslq    'T'
	- Henry    'H'
	- Lumen    'lm'
	- Lux      'lx'
	- Katal    'kat'  => mol/s
	
	
	* Astronomical Units:
		-	AstronomicalUnit symbol changed from 'AU' to 'au'
		-   Light Year Length added                      'ly'
		-   Parsec unit  length                          'pc'  with metric support
		-   Solar Mass unit                              'Mo'
		-   Julian Year unit							 'a'
		
		
	
	-Are unit of area       symnol changed from 'a' to 'are'
	
	-u unified mass of atom  added 'u' = 'Da'
	-Dalton transfered to Natural Units
	
	* Shared Unit System added 
		The shared system contains units that exists in all unit systems
		-Second 's'  transfered to Shared unit system 
		
	* Misc Unit System added
		the system is for units that don't have exact unit system and needs to be there untill we know its unit systems

		+ Angle units
			- Arc Degree unit added  'deg'  ==>this is simple the angle degrees
			- Arc Minute unit        'arcmin'
			- Arc Second unit        'arcsec'
			- Milli Arc Second       'mas'
			- Gradian  unit          'grad'
			- Revolution  unit       'r'   whole one cycle = 360<deg>
			
		- Angstrom Transfered to Misc namespace
		
		+ Time units
			- Minute unit            'min'
			- Hour   unit            'h'
			- Day    unit            'd'	
		
		+ Volume units
			- Cubit Centimetre       'cc'	
	
	
	
* Units Logic
	Two ways in defining Quantity System of Units
		a) Make a default unit and others to reference it.
		b) Make all units reference SI units directly.	
	Either ways are acceptable but not mixed or a conversion errors occur {please refer to the code}
	
	Note: units symbols are unique and case sensitive
	
	